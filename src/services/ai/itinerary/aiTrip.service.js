const AIBaseService = require('../core/aiBase.service');
const AISchemaService = require('../utils/aiSchema.service');

/**
 * AITripService - Handles trip-specific AI operations
 * Focuses on trip generation, optimization, and management
 */
class AITripService extends AIBaseService {
  constructor() {
    super();
    this.schemaService = new AISchemaService();
  }

  /**
   * Generate trip itinerary using structured output
   */
  async generateItinerary(userId, tripId, options = {}) {
    try {
      // Get trip data from database
      const { Trip } = require('../../../models/trips');
      const trip = await Trip.findById(tripId);

      if (!trip) {
        throw new Error('TRIP_NOT_FOUND');
      }

      if (!trip.isOwnedBy(userId)) {
        throw new Error('TRIP_ACCESS_DENIED');
      }

      // Check if trip already has a complete itinerary
      if (trip.itinerary && trip.itinerary.days && trip.itinerary.days.length > 0) {
        console.log('‚Ñπ Trip already has itinerary, returning existing data...');
        return {
          itinerary: trip.itinerary.days,
          tokensUsed: 0,
          processingTime: 0,
          rateLimitRemaining: 0,
          status: 'exists',
          message: 'Itinerary already exists for this trip'
        };
      }

      console.log('üéØ Generating itinerary with AI...');

      // Use structured output approach
      const result = await this.generateStructuredItinerary(userId, tripId, options);

      // Save itinerary to database
      if (result.itinerary && result.itinerary.length > 0) {
        trip.itinerary = {
          destination: trip.destination.destination,
          overview: `L·ªãch tr√¨nh ${trip.duration} ng√†y t·∫°i ${trip.destination.destination} ƒë∆∞·ª£c t·∫°o b·ªüi AI`,
          days: result.itinerary,
          totalCost: trip.budget?.total || 0,
          tips: result.tips || [
            'ƒê·∫∑t ph√≤ng kh√°ch s·∫°n v√† ho·∫°t ƒë·ªông tr∆∞·ªõc ƒë·ªÉ c√≥ gi√° t·ªët nh·∫•t',
            'Mang theo kem ch·ªëng n·∫Øng, m≈© n√≥n v√† n∆∞·ªõc u·ªëng',
            'H·ªçc m·ªôt v√†i t·ª´ ti·∫øng Vi·ªát c∆° b·∫£n ƒë·ªÉ giao ti·∫øp v·ªõi ng∆∞·ªùi d√¢n ƒë·ªãa ph∆∞∆°ng',
            'Th·ª≠ c√°c m√≥n ƒÉn ƒë∆∞·ªùng ph·ªë ƒë·∫∑c tr∆∞ng c·ªßa v√πng mi·ªÅn',
            'S·ª≠ d·ª•ng ·ª©ng d·ª•ng Grab ho·∫∑c taxi ƒë·ªÉ di chuy·ªÉn an to√†n'
          ]
        };
        trip.status = 'completed';
        await trip.save();

        console.log('‚úÖ Itinerary saved to database successfully!');
      }

      return {
        itinerary: result.itinerary,
        tokensUsed: result.tokensUsed,
        processingTime: result.processingTime,
        rateLimitRemaining: result.rateLimitRemaining,
        status: 'success',
        saved: true
      };

    } catch (error) {
      console.error('Generate itinerary error:', error);
      throw error;
    }
  }

  /**
   * Generate structured itinerary using predefined schema
   * @param {string} userId - User ID
   * @param {string} tripId - Trip ID
   * @param {Object} options - Additional options
   * @returns {Promise<Object>} Structured itinerary response
   */
  async generateStructuredItinerary(userId, tripId, options = {}) {
    try {
      // Get trip data
      const { Trip } = require('../../../models/trips');
      const trip = await Trip.findById(tripId);

      if (!trip) {
        throw new Error('TRIP_NOT_FOUND');
      }

      if (!trip.isOwnedBy(userId)) {
        throw new Error('TRIP_ACCESS_DENIED');
      }

      console.log('üîß Generating structured itinerary...');

      // Calculate actual dates for the trip
      const startDate = new Date(trip.destination.startDate);
      const actualDates = [];
      for (let i = 0; i < trip.duration; i++) {
        const date = new Date(startDate);
        date.setDate(startDate.getDate() + i);
        actualDates.push(date.toISOString().split('T')[0]);
      }

      console.log('üìÖ Trip dates calculated:', actualDates);

      // Create itinerary schema
      const itinerarySchema = this.schemaService.createItinerarySchema(trip.duration || 3, actualDates);

      // Build prompt with VND currency support
      const currency = trip.budget?.currency || 'VND';
      const budgetText = trip.budget?.total ?
        `Budget: ${trip.budget.total.toLocaleString()} ${currency}` : '';

      const prompt = `T·∫°o l·ªãch tr√¨nh ${trip.duration} ng√†y cho ${trip.destination.destination} t·ª´ ${actualDates[0]} ƒë·∫øn ${actualDates[actualDates.length - 1]}.
      ${budgetText}

      QUAN TR·ªåNG: S·ª≠ d·ª•ng ƒê√öNG c√°c ng√†y n√†y cho m·ªói ng√†y: ${actualDates.join(', ')}

      Y√™u c·∫ßu tr·∫£ v·ªÅ b·∫±ng ti·∫øng Vi·ªát, bao g·ªìm:
      - C√°c ho·∫°t ƒë·ªông h√†ng ng√†y v·ªõi th·ªùi gian, ti√™u ƒë·ªÅ, m√¥ t·∫£ chi ti·∫øt, ƒë·ªãa ch·ªâ c·ª• th·ªÉ, th·ªùi l∆∞·ª£ng, chi ph√≠, v√† ghi ch√∫ h·ªØu √≠ch
      - ƒê·ªãa ch·ªâ chi ti·∫øt v√† t√™n ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ
      - Ghi ch√∫ th·ª±c t·∫ø nh∆∞: c√°ch di chuy·ªÉn, th·ªùi gian t·ªët nh·∫•t, l∆∞u √Ω ƒë·∫∑c bi·ªát, kinh nghi·ªám du l·ªãch
      - Gi√° c·∫£ th·ª±c t·∫ø cho ƒë·ªãa ƒëi·ªÉm Vi·ªát Nam (VD: ƒÉn u·ªëng 50,000-200,000 VND, ho·∫°t ƒë·ªông 100,000-500,000 VND)

      Cu·ªëi c√πng, th√™m ph·∫ßn tips du l·ªãch h·ªØu √≠ch.

      Tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON v·ªõi c·∫•u tr√∫c ƒê√öNG nh∆∞ sau:
      {
        "days": [
          {
            "date": "${actualDates[0]}",
            "activities": [
              {
                "time": "09:00",
                "title": "T√™n ho·∫°t ƒë·ªông",
                "description": "M√¥ t·∫£ chi ti·∫øt b·∫±ng ti·∫øng Vi·ªát",
                "location": "T√™n ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ, ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                "duration": 120,
                "cost": 0,
                "category": "cultural",
                "notes": "Ghi ch√∫ h·ªØu √≠ch b·∫±ng ti·∫øng Vi·ªát"
              }
            ]
          }
        ],
        "tips": [
          "M·∫πo du l·ªãch 1",
          "M·∫πo du l·ªãch 2",
          "M·∫πo du l·ªãch 3"
        ]
      }`;

      console.log('üìù Prompt length:', prompt.length, 'characters');
      console.log('üìã Schema configuration:', {
        type: itinerarySchema.responseSchema?.type,
        mimeType: itinerarySchema.responseMimeType,
        maxItems: itinerarySchema.responseSchema?.maxItems
      });

      // Call Gemini with structured output
      const response = await this.apiClient.callGeminiWithStructuredOutput(
        'pro',
        prompt,
        itinerarySchema,
        options
      );

      // Check if API response is valid
      if (!response || !response.content) {
        console.error('‚ùå Gemini API returned empty response');
        throw new Error('GEMINI_API_NO_RESPONSE');
      }

      // Check for error messages in response
      if (typeof response.content === 'string' && 
          (response.content.includes('No content generated') || 
           response.content.includes('error') || 
           response.content.trim() === '')) {
        console.error('‚ùå Gemini API returned error or empty content:', response.content);
        throw new Error(`GEMINI_API_ERROR: ${response.content}`);
      }

      // Transform response to match Mongoose schema
      let structuredData;
      
      try {
        structuredData = response.isStructured ? response.content :
          JSON.parse(response.content);
      } catch (parseError) {
        console.error('‚ùå Failed to parse Gemini response as JSON:', response.content);
        console.error('Parse error:', parseError.message);
        
        // Try to use responseParser as fallback
        try {
          console.log('üîÑ Attempting fallback parsing...');
          structuredData = this.responseParser.processItineraryResponse(response.content, trip);
        } catch (fallbackError) {
          console.error('‚ùå Fallback parsing also failed:', fallbackError.message);
          
          // Final fallback: Use template service to generate a basic itinerary
          console.log('üîÑ Using template service as final fallback...');
          try {
            structuredData = this.templateService.generateTemplateBasedItinerary(trip);
            console.log('‚úÖ Template-based itinerary generated successfully');
          } catch (templateError) {
            console.error('‚ùå Template service also failed:', templateError.message);
            throw new Error(`ALL_FALLBACKS_FAILED: JSON parsing failed, responseParser failed, template service failed. Original error: ${parseError.message}`);
          }
        }
      }

      console.log('üîÑ Transforming Gemini response to Mongoose format...');
      structuredData = this._transformGeminiToMongoose(structuredData);

      // Extract tips from response
      const tips = structuredData.tips || [
        'ƒê·∫∑t ph√≤ng kh√°ch s·∫°n v√† ho·∫°t ƒë·ªông tr∆∞·ªõc ƒë·ªÉ c√≥ gi√° t·ªët nh·∫•t',
        'Mang theo kem ch·ªëng n·∫Øng, m≈© n√≥n v√† n∆∞·ªõc u·ªëng',
        'H·ªçc m·ªôt v√†i t·ª´ ti·∫øng Vi·ªát c∆° b·∫£n ƒë·ªÉ giao ti·∫øp v·ªõi ng∆∞·ªùi d√¢n ƒë·ªãa ph∆∞∆°ng',
        'Th·ª≠ c√°c m√≥n ƒÉn ƒë∆∞·ªùng ph·ªë ƒë·∫∑c tr∆∞ng c·ªßa v√πng mi·ªÅn',
        'S·ª≠ d·ª•ng ·ª©ng d·ª•ng Grab ho·∫∑c taxi ƒë·ªÉ di chuy·ªÉn an to√†n'
      ];

      // Validate structure if responseParser is available
      if (this.responseParser && this.responseParser.validateItinerary) {
        try {
          const validation = this.responseParser.validateItinerary(structuredData, trip);
          if (!validation.ok) {
            console.warn('‚ö†Ô∏è Itinerary validation warnings:', validation.issues);
          }
        } catch (validationError) {
          console.warn('‚ö†Ô∏è Validation failed, but continuing:', validationError.message);
        }
      } else {
        console.warn('‚ö†Ô∏è ResponseParser not available for validation');
      }

      console.log('‚úÖ Structured itinerary generated successfully!');

      return {
        itinerary: structuredData,
        tokensUsed: response.tokensUsed,
        processingTime: response.processingTime || 0,
        rateLimitRemaining: response.rateLimitRemaining || 0,
        tips: tips
      };

    } catch (error) {
      console.error('Generate structured itinerary error:', error);
      throw error;
    }
  }

  /**
   * Transform Gemini response to Mongoose format
   * @param {Object} geminiData - Raw response from Gemini
   * @returns {Array} Transformed data matching Mongoose schema
   */
  _transformGeminiToMongoose(geminiData) {
    console.log('üîÑ Transforming Gemini format to Mongoose format...');

    // Handle both old format (direct array) and new format (with days property)
    const days = geminiData.days || geminiData;

    const result = Array.isArray(days) ? days.map(day => ({
      date: day.date,
      activities: day.activities.map(activity => ({
        time: activity.time,
        title: activity.title,
        description: activity.description || '',
        location: {
          name: typeof activity.location === 'string' ? activity.location : activity.location?.name || activity.title,
          address: typeof activity.location === 'object' ? activity.location?.address || activity.location : `${activity.title} location`
        },
        duration: activity.duration || 120,
        cost: activity.cost || 0,
        category: this._mapCategoryToEnum(activity.category),
        notes: activity.notes || ''
      }))
    })) : [];

    // Attach tips to result for later use
    result.tips = geminiData.tips || [];

    return result;
  }

  /**
   * Map AI-generated category to valid enum values
   * @param {string} aiCategory - Category from AI
   * @returns {string} Valid enum category
   */
  _mapCategoryToEnum(aiCategory) {
    if (!aiCategory) return 'cultural';

    const normalized = aiCategory.toLowerCase().trim();

    const categoryMap = {
      // English categories
      'cultural': 'cultural', 'culture': 'cultural', 'historical': 'cultural',
      'museum': 'cultural', 'temple': 'cultural', 'pagoda': 'cultural',
      'church': 'cultural', 'cathedral': 'cultural',

      'food': 'food', 'restaurant': 'food', 'cafe': 'food', 'coffee': 'food',
      'meal': 'food', 'dining': 'food', 'cuisine': 'food', 'snack': 'food',

      'nature': 'nature', 'beach': 'nature', 'park': 'nature', 'mountain': 'nature',
      'scenery': 'nature', 'landscape': 'nature', 'outdoor': 'nature', 'natural': 'nature',

      'shopping': 'shopping', 'market': 'shopping', 'mall': 'shopping',
      'boutique': 'shopping', 'store': 'shopping',

      'adventure': 'adventure', 'sport': 'adventure', 'sports': 'adventure',
      'hiking': 'adventure', 'trekking': 'adventure',

      'nightlife': 'nightlife', 'night': 'nightlife', 'bar': 'nightlife',
      'club': 'nightlife', 'entertainment': 'nightlife',

      'relaxation': 'relaxation', 'relax': 'relaxation', 'spa': 'relaxation',
      'massage': 'relaxation', 'wellness': 'relaxation', 'leisure': 'relaxation',

      'transportation': 'transportation', 'transport': 'transportation',
      'travel': 'transportation', 'bus': 'transportation', 'taxi': 'transportation',

      'accommodation': 'accommodation', 'hotel': 'accommodation',
      'resort': 'accommodation', 'stay': 'accommodation', 'lodging': 'accommodation',

      // Ti·∫øng Vi·ªát categories
      'vƒÉn h√≥a': 'cultural', 'l·ªãch s·ª≠': 'cultural', 'di t√≠ch': 'cultural',
      'ƒë·ªÅn': 'cultural', 'ch√πa': 'cultural', 'nh√† th·ªù': 'cultural', 'b·∫£o t√†ng': 'cultural',
      
      '·∫©m th·ª±c': 'food', 'ƒë·ªì ƒÉn': 'food', 'qu√°n ƒÉn': 'food', 'c√† ph√™': 'food',
      'b·ªØa ƒÉn': 'food', 'm√≥n ƒÉn': 'food', 'ƒÉn v·∫∑t': 'food',
      
      'thi√™n nhi√™n': 'nature', 'b√£i bi·ªÉn': 'nature', 'c√¥ng vi√™n': 'nature',
      'n√∫i': 'nature', 'phong c·∫£nh': 'nature', 'ngo√†i tr·ªùi': 'nature',
      
      'mua s·∫Øm': 'shopping', 'ch·ª£': 'shopping', 'trung t√¢m th∆∞∆°ng m·∫°i': 'shopping',
      'c·ª≠a h√†ng': 'shopping',
      
      'phi√™u l∆∞u': 'adventure', 'th·ªÉ thao': 'adventure', 'leo n√∫i': 'adventure', 'ƒëi b·ªô': 'adventure',
      
      'gi·∫£i tr√≠ ƒë√™m': 'nightlife', 'qu√°n bar': 'nightlife', 'c√¢u l·∫°c b·ªô': 'nightlife', 'vui ch∆°i': 'nightlife',
      
      'ngh·ªâ ng∆°i': 'relaxation', 'th∆∞ gi√£n': 'relaxation', 's·ª©c kh·ªèe': 'relaxation',
      
      'giao th√¥ng': 'transportation', 'di chuy·ªÉn': 'transportation', 'du l·ªãch': 'transportation',
      'xe bu√Ωt': 'transportation',
      
      'kh√°ch s·∫°n': 'accommodation', 'l∆∞u tr√∫': 'accommodation',

      // Default fallbacks
      'sightseeing': 'cultural', 'landmark': 'cultural', 'attraction': 'cultural',
      'tour': 'cultural', 'visit': 'cultural', 'exploration': 'cultural',
      'experience': 'cultural', 'thƒÉm quan': 'cultural', 'kh√°m ph√°': 'cultural',
      'tr·∫£i nghi·ªám': 'cultural'
    };

    return categoryMap[normalized] || 'cultural';
  }
}

module.exports = AITripService;
